# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SpaceArcheoDialog
                                 A QGIS plugin
 Calculates Datasets for Archeologists from OS Data
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-04-01
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Christian Mielke
        email                : christian.mielke@raddata.io
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import sys
from qgis.PyQt import QtWidgets
from qgis.PyQt import uic

print(os.getcwd())
# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'space_archeo_dialog_base.ui'))
PLUGIN_DIR = os.path.dirname(__file__)
sys.path.append(PLUGIN_DIR)
import batch_proc_dai as bpd


class DeCompress:
    # Unzip/tar.gz all files in folder
    def __init__(self, foldername):
        file_list1 = bpd.psrp('tar.gz', foldername)
        file_list2 = bpd.psrp('.zip', foldername)
        file_list3 = bpd.psrp('.tar', foldername)
        if len(file_list1) > 0:
            for file in file_list1:
                fname = os.path.basename(file).split(".tar")[0]
                basename = os.path.dirname(file)
                try:
                    os.mkdir(f'{basename}/{fname}_srdata_')
                    bpd.FolderFunctions.untragz_python(file, f'{basename}/{fname}_srdata_')
                except FileExistsError:
                    print(f'{basename}/{fname}_srdata_ already exists')
        if len(file_list3) > 0:
            for file in file_list3:
                fname = os.path.basename(file).split(".tar")[0]
                basename = os.path.dirname(file)
                try:
                    os.mkdir(f'{basename}/{fname}_srdata_')
                    bpd.FolderFunctions.untragz_python(file, f'{basename}/{fname}_srdata_')
                except FileExistsError:
                    print(f'{basename}/{fname}_srdata_ already exists')
        if len(file_list2) > 0:
            for file in file_list2:
                basename = os.path.dirname(file)
                try:
                    bpd.FolderFunctions.unzip_python(file, basename)
                except FileExistsError:
                    print(f'Something went wrong.')


class SpaceArcheoDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        super(SpaceArcheoDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.Pusher.clicked.connect(self.printradiostatus)

    def selectFile1(self):
        self.PickFolder.setText(QtWidgets.QFileDialog.getOpenFileName()[0])

    def selectFile2(self):
        self.PickCustomIndex.setText(QtWidgets.QFileDialog.getOpenFileName()[0])

    def selectFile3(self):
        self.PickIndices.setText(QtWidgets.QFileDialog.getOpenFileName()[0])

    def printradiostatus(self):
        print(os.getcwd())
        # print(self.plugin_dir)
        self.folder = os.path.dirname(self.PickFolder.filePath())
        print(self.folder)
        if self.radiounzip.isChecked():
            DeCompress(self.folder)
            print(f'Finished unzipping all compressed folders in {self.folder}')
        elif self.radiosort_folder.isChecked():
            bpd.FolderFunctions.sort_uncompressed(self.folder)
            print(f'Finished sorting all compressed folders in {self.folder}')
        elif self.radiosort_comp.isChecked():
            bpd.FolderFunctions.sort_compressed(self.folder)
            print(f'Finished sorting all compressed files in {self.folder}')
        elif self.radiostack.isChecked():
            bpd.SensorCalculationsStatic.stack_all(self.folder)
            print(f'Finished stacking all files in subfolders of {self.folder}')
        elif self.radiocalcustom.isChecked():
            print(
                f'Calculating all custom ratios, from your input file {self.PickCustomIndex.filePath()} this may take some time...')
        elif self.radiocalred.isChecked():
            bpd.SensorCalculationsStatic.ratios(self.folder, flagg=1)
            print(f'Calculated all reduced ratios, this took some time...')
        elif self.radiostackratio.isChecked():
            myratios = self.text_ratiostack.toPlainText()
            print(f'Calculating Hypertemporal Filtering this Takes very long...')
            print(myratios)
        elif self.radiohypertemporal.isChecked():
            myheda = self.text_heda.toPlainText()
            print(f'Calculating Hypertemporal Filtering this Takes very long...')
            print(myheda)
        elif self.radiocalall.isChecked():
            bpd.SensorCalculationsStatic.ratios(self.folder, flagg=0)
            print(f'Calculated all ratios this took some time...')
